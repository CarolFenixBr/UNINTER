# -*- coding: utf-8 -*-
"""Aula prática 3 - POO.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nPZlOkJK4-SZei9li8-xUCjNXgWBCI0Q
"""

print(type("olá"))
print(type(1))
print(type(1.5))

"ola".upper()

class Jogador:
  def jogar(self):
    print('Método jogar foi inicializado')

j1 =  Jogador()
j1.jogar()

class Pessoa:
  def __init__(self,nome,idade):
    self.nome=nome
    self.idade=idade

  def apresentar(self):
    print(f'Olá meu nome é {self.nome} e minha idade é {self.idade}')

p1 = Pessoa('Caroline',29)
p1.apresentar()

p2 = Pessoa('James',30)
p2.apresentar()

class Funcionario(Pessoa):
  pass

f1 = Funcionario('Luffy',20)

f1.apresentar()

class Cliente(Pessoa):
  quantidadeClientes=0 #variável estática static
  def __init__(self, nome,idade):
    super().__init__(nome,idade)
    Cliente.quantidadeClientes+=1
    self.cadastro=1000+Cliente.quantidadeClientes

  def apresentar(self):
    super().apresentar()
    print(f'e sou cliente de cadastro: {self.cadastro}')

c1=Cliente('Zoro',18)
c2=Cliente('Cloud',20)
c1.apresentar()
c2.apresentar()

class Funcionario(Pessoa):
  def __init__(self, nome, idade,cadastro):
    self.nome=nome
    self.idade=idade
    self.cadastro = cadastro

  def apresentar(self):
    print(f'Olá sou o(a) funcionário(a) {self.nome} e minha idade é {self.idade}, e meu cadastro é {self.cadastro}')

f1 = Funcionario('Luffy',20, 1014)
f2 = Funcionario('Caroline',29, 2019)

f1.apresentar()
f2.apresentar()

class Aluno:
  totalAlunos=0
  def __init__(self,nome,nota):
    Aluno.totalAlunos+=1
    self.nome=nome
    self.nota=nota #0-100
    self.ru=1000+Aluno.totalAlunos

  def info(self):
    print(f'Nome: {self.nome}; RU: {self.ru}; Nota{self.nota};')

  def getNota(self):
    return self.nota

#a1 =Aluno('Asta', 60)
#a1.info()

class Turma:
  def __init__(self,nome,limiteAlunos):
    self.nome=nome
    self.limiteAlunos=limiteAlunos
    self.listaAlunos=[]

  def addAluno(self,aluno):
    if len(self.listaAlunos) <self.limiteAlunos:
      self.listaAlunos.append(aluno)
      return True
    return False

  def mediaTurma(self):
    soma=0
    for aluno in self.listaAlunos:
      soma+=aluno.getNota()
    return soma/len(self.listaAlunos)

a1 = Aluno('Luffy', 50)
a2 = Aluno('Asta', 40)
a3 = Aluno('Sakura',90)

t1 = Turma('Programação',5)
t1.addAluno(a1)
t1.addAluno(a2)
t1.addAluno(Aluno('Sasuke',100))

print(t1.addAluno(a3))

print(t1.mediaTurma())

print(t1.listaAlunos[1].nome)
print(t1.listaAlunos[1].getNota())
